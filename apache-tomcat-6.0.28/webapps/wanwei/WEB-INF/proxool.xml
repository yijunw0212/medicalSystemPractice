<?xml version="1.0" encoding="utf-8"?>
	<!--
		Properties for Proxool Configurator testing. Defines the same
		parameters as TestHelper.buildCompleteAlternativeProperties()
	-->
<proxool:config xmlns="http://sumthin.else.entirely"
	xmlns:proxool="The latest version is available at http://proxool.sourceforge.net/xml-namespace">
	<proxool:proxool>
		<proxool:alias>test</proxool:alias>
		<proxool:driver-url>jdbc:mysql://192.168.1.66:3306/lbs?characterEncoding=utf-8
		</proxool:driver-url>
		<proxool:driver-class>com.mysql.jdbc.Driver</proxool:driver-class>
		<proxool:driver-properties>
			<proxool:property name="user" value="root" />
			<proxool:property name="password" value="111" />
		</proxool:driver-properties>
		<!--
			house-keeping-sleep-time: house keeper 保留线程处于睡眠状态的最长时间, house keeper
			的职责就是检查各个连接的状态,并判断是否需要销毁或者创建.
		-->
		<proxool:house-keeping-sleep-time>400000
		</proxool:house-keeping-sleep-time>
		<!--
			house-keeping-test-sql: 如果发现了空闲的数据库连接.house keeper 将会用这个语句来测试.
			这个语句最好非常快的被执行.如果没有定义,测试过程将会被忽略。
		-->
		<proxool:house-keeping-test-sql>select CURRENT_DATE
		</proxool:house-keeping-test-sql>
		<!-- maximum-connection-count: 最大的数据库连接数.  -->
		<proxool:maximum-connection-count>100
		</proxool:maximum-connection-count>
		<!-- minimum-connection-count: 最小的数据库连接数  -->
		<proxool:minimum-connection-count>3
		</proxool:minimum-connection-count>
		<!-- maximum-connection-lifetime: 一个线程的最大寿命.  -->
		<proxool:maximum-connection-lifetime>18000000
		</proxool:maximum-connection-lifetime> <!-- 5 hours -->
		<!--
			maximum-active-time: 如果housekeeper 检测到某个线程的活动时间大于这个数值.它将会杀掉这个线程.
			所以确认一下你的服务器的带宽.然后定一个合适的值.默认是5分钟.
		-->
		<proxool:maximum-active-time>60000</proxool:maximum-active-time>
		<!--最大的等待请求数,即因没有空闲连接可以分配而在队列中等候的最大请求数,超过这个请求数的用户连接就不会被接受-->
		<proxool:simultaneous-build-throttle>100
		</proxool:simultaneous-build-throttle>
		<proxool:recently-started-threshold>40000
		</proxool:recently-started-threshold>
		<proxool:overload-without-refusal-lifetime>50000
		</proxool:overload-without-refusal-lifetime>
		<!-- verbose: 详细信息设置。 参数 bool 值 -->
		<proxool:verbose>false</proxool:verbose>
		<!--
			trace: 如果为true,那么每个被执行的SQL语句将会在执行期被log记录(DEBUG LEVEL).
			你也可以注册一个ConnectionListener (参看ProxoolFacade)得到这些信息.
		-->
		<proxool:trace>true</proxool:trace>
		<!--
			fatal-sql-exception: 它是一个逗号分割的信息片段.当一个SQL异常发生时,
			他的异常信息将与这个信息片段进行比较.如果在片段中存在,那么这个异常将被认为是个致命错误 (Fatal SQL Exception
			).这种情况下,数据库连接将要被放弃.无论发生什么, 这个异常将会被重掷以提供给消费者.用户最好自己配置一个不同的异常来抛出.
		-->
		<proxool:fatal-sql-exception>Fatal error
		</proxool:fatal-sql-exception>
		<!--
			prototype-count: 连接池中可用的连接数量.如果当前的连接池中的连接少于这个数值.
			新的连接将被建立(假设没有超过最大可用数).例如.我们有3个活动连接2个可用连接,
			而我们的prototype-count是4,那么数据库连接池将试图建立另外2个连接. 这和
			minimum-connection-count不同. minimum-connection-count把活动的连接也计算在内.
			prototype-count 是spare connections 的数量.
		-->
		<proxool:prototype-count>2</proxool:prototype-count>

		<!--
			其他属性说明 ： fatal-sql-exception-wrapper-class:正如上面所说,你最好配置一个不同的异常来重掷.
			利用这个属性,用户可以包装SQLException,使他变成另外一个异常.这个异常或者继承SQLException或者继承字
			RuntimeException.proxool自带了2个实现:'org.logicalcobwebs.proxool.FatalSQLException'
			和 'org.logicalcobwebs.proxool.FatalRuntimeException' .后者更合适.
			injectable-connection-interface: 允许proxool实现被代理的connection对象的方法.
			injectable-statement-interface: 允许proxool实现被代理的Statement 对象方法.
			injectable-prepared-statement-interface:
			允许proxool实现被代理的PreparedStatement 对象方法.
			injectable-callable-statement-interface:
			允许proxool实现被代理的CallableStatement 对象方法.
		-->
	</proxool:proxool>
</proxool:config>